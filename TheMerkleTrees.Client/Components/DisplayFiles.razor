@using System.Net
@using MetaMask.Blazor
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@using TheMerkleTrees.Client.Models
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthStateProvider
@inject IMetaMaskService MetaMaskService
@inject HttpClient Http
@inject IJSRuntime JS
@inject FileStateContainer FileState

<div class="mt-4 mb-2 mx-12 flex justify-center pb-12">
    <div class="w-full max-w-4xl">
        <div class="flex justify-center mb-4">
            <select @onchange="OnCategoryChanged" class="text-gray-500 transition ease-in-out duration-600 text-sm border border-gray-700 hover:bg-gray-200 px-2 py-1 rounded">
                <option value="">Toutes les catégories</option>
                @foreach (var category in categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-6">
            @foreach (var file in sortedFiles)
            {
                <div class="m-4 flex flex-col items-center justify-center">
                    <a href="@GetLinkToFile(file.Hash)" target="_blank">
                        @if (GetFileExtension(file.Name) == ".txt")
                        {
                            <img src="images/txt-logo.svg" width="64px" height="64px" alt="File Logo"/>
                        }
                        else if (GetFileExtension(file.Name) == ".html")
                        {
                            <img src="images/html-logo.svg" width="64px" height="64px" alt="File Logo"/>
                        }
                        else if (GetFileExtension(file.Name) == ".pdf")
                        {
                            <img src="images/pdf-logo.svg" width="64px" height="64px" alt="File Logo"/>
                        }
                        else if (GetFileExtension(file.Name) == ".png" || GetFileExtension(file.Name) == ".jpg" || GetFileExtension(file.Name) == ".jpeg")
                        {
                            <img src="images/img-logo.svg" width="64px" height="64px" alt="File Logo"/>
                        }
                        else
                        {
                            <img src="images/file-logo.svg" width="64px" height="64px" alt="File Logo"/>
                        }
                    </a>
                    <div class="flex justify-center items-center text-gray-400 text-xs my-1 mx-4 h-8 text-center">@TruncateFileName(file.Name)</div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string userAddress;
    private string apiBaseUrl;
    private string selectedCategory = "";
    private List<File> sortedFiles = new List<File>();
    private List<string> categories = new List<string>();

    protected override void OnInitialized()
    {
        FileState.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userAddress = user.Identity.Name;
            var files = await Http.GetFromJsonAsync<List<File>>($"{apiBaseUrl}/api/Files/user/{userAddress}");
            FileState.SetFiles(files);
            categories = files.Select(f => f.Category).Distinct().ToList();
            SortFiles();
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }
    }

    private void OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value.ToString();
        SortFiles();
    }

    private void SortFiles()
    {
        if (string.IsNullOrEmpty(selectedCategory))
        {
            sortedFiles = FileState.Files;
        }
        else
        {
            sortedFiles = FileState.Files.Where(f => f.Category == selectedCategory).ToList();
        }
    }

    private string TruncateAddress(string address)
    {
        if (string.IsNullOrEmpty(address) || address.Length < 10)
        {
            return address;
        }

        return $"{address.Substring(0, 4)}...{address.Substring(address.Length - 3)}";
    }

    private string GetFileExtension(string fileName)
    {
        string fileExtension = Path.GetExtension(fileName).ToLowerInvariant();
        return fileExtension;
    }

    private string GetLinkToFile(string hash)
    {
        return $"ipfs://{hash}";
    }

    private async Task DownloadFile(string hash)
    {
        var fileName = $"{hash}.txt";
        var fileUrl = $"ipfs://{hash}";
        await JS.InvokeVoidAsync("downloadFileFromUrl", fileName, fileUrl);
    }

    private string TruncateFileName(string fileName)
    {
        if (string.IsNullOrEmpty(fileName) || fileName.Length < 10)
        {
            return fileName;
        }

        return $"{fileName.Substring(0, 12)}...{fileName.Substring(fileName.Length - 8)}";
    }

    public void Dispose()
    {
        FileState.OnChange -= StateHasChanged;
    }
}