@using System.Net
@using MetaMask.Blazor
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject IMetaMaskService MetaMaskService
@inject HttpClient Http
@inject IJSRuntime JS

<div class="mt-4 mb-2 mx-12 flex justify-center pb-12">
    <div class="w-full max-w-4xl grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
        @foreach (var file in files)
        {
            <div class="m-4 flex flex-col items-center justify-center">
                <object type="image/svg+xml" data="images/file-logo.svg" width="72px" height="72px"></object>
                
                <div class="flex justify-center items-center text-gray-400 text-xs mb-1 mx-4 h-8">@file.Name</div>
                
                <p class="text-gray-500 text-xs mb-1">@file.Category</p>
                
                <div class="flex justify-between items-center">
                    <a href="@GetLinkToFile(file.Hash)" target="_blank">
                        <img src="images/open-logo.svg" width="20px" height="20px" alt="Download">
                    </a>
                    
                    <a href="javascript:void(0);" @onclick="() => DownloadFile(file.Hash)">
                        <img src="images/download-logo.svg" width="20px" height="20px" alt="Download">
                    </a>
                </div>
            </div>
        }
    </div>
</div>

@code {

    private List<File> files = new List<File>();
    private string userAddress;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userAddress = user.Identity.Name;
            files = await
            Http.GetFromJsonAsync<List<File>>($"https://d08ljx1q-5083.uks1.devtunnels.ms/api/Files/user/{userAddress}");
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }
        Console.Write(files);
    }

    private string TruncateAddress(string address)
    {
        if (string.IsNullOrEmpty(address) || address.Length < 10)
        {
            return address;
        }

        return $"{address.Substring(0, 4)}...{address.Substring(address.Length - 3)}";
    }

    private string GetLinkToFile(string hash)
    {
        return $"ipfs://{hash}";
    }

    private async Task DownloadFile(string hash)
    {
        var fileName = $"{hash}.txt";
        var fileUrl = $"https://d08ljx1q-8080.uks1.devtunnels.ms/ipfs/{hash}";
        await JS.InvokeVoidAsync("downloadFileFromUrl", fileName, fileUrl);
    }

    private class AddResponse
    {
        public string Hash { get; set; }
    }

    public class File
    {
        public string Id { get; set; } = null!;
        public string Hash { get; set; } = null!;
        public string Name { get; set; } = null!;
        public string Category { get; set; } = null!;
        public bool IsPublic { get; set; }
        public string Owner { get; set; } = null!;
    }
}