@using MongoDB.Bson;
@using System.Diagnostics
@using System.Net.Http
@using System.Net.Http.Json
@using System.ComponentModel
@using System.Net
@using System.Security.Claims;
@using MetaMask.Blazor
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json.Bson
@inject AuthenticationStateProvider AuthStateProvider
@inject IMetaMaskService MetaMaskService
@inject HttpClient Http

<div class="w-full flex items-center justify-center flex-col py-12 bg-[#ffffff] mb-12">
    <h1 class="text-2xl mb-2">Upload File</h1>

    <InputFile 
        class="transition ease-in-out duration-600 text-sm hover:text-white border border-gray-700 hover:bg-gray-800 px-4 py-2 rounded mt-4 mb-2 cursor-pointer" 
        OnChange="@HandleFileSelected" 
    />
    
    <div class="mt-4 mb-2">
        <label for="category">Category:</label>
        <InputSelect @bind-Value="category" TValue="string" class="px-4 py-2 border rounded">
            <option value="">Select a category</option>
            <option value="Hortense">Hortense</option>
            <option value="Pierre">Pierre</option>
            <option value="Ariane">Ariane</option>
        </InputSelect>
    </div>
    
    <div class="mt-4 mb-2">
        <input type="checkbox" id="isPublic" @BindableAttribute="isPublic" />
        <label for="isPublic">Public</label>
    </div>

    @if (fileContent != null)
    {
        <button class="transition ease-in-out duration-300 text-sm text-white bg-gray-700 hover:bg-gray-800 px-4 py-2 mt-2 mb-4 rounded" 
                @onclick="AddToIPFS">Send
        </button>
    }
</div> 

@code {
    
    private byte[] fileContent;
    private string fileName;
    private string category;
    private bool isPublic;
    private string userAddress;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            userAddress = user.Identity.Name;
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }
    }
    
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        fileName = file.Name;
        using var ms = new MemoryStream();
        await file.OpenReadStream(1024 * 1024 * 5).CopyToAsync(ms);
        fileContent = ms.ToArray();
    }
    
    private async Task AddToIPFS()
    {
        var httpClient = new HttpClient();
        var formData = new MultipartFormDataContent();
        formData.Add(new ByteArrayContent(fileContent), "file", fileName);
        
        var response = await httpClient.PostAsync("http://127.0.0.1:5001/api/v0/add", formData);
        response.EnsureSuccessStatusCode();
        
        var result = await response.Content.ReadFromJsonAsync<AddResponse>();
        var cid = result.Hash;
        var url = $"https://ipfs.io/ipfs/{cid}";
        
        Console.WriteLine($"Fichier ajouté à IPFS avec CID : {cid}");
        Console.WriteLine($"URL du fichier : {url}");

        var file = new File
        {
            Id = ObjectId.GenerateNewId().ToString(),
            Name = fileName,
            Hash = cid,
            Category = category,
            IsPublic = isPublic,
            Owner = userAddress,
            EncryptionKey = "exampleOfKey"
        };

        var saveResponse = await Http.PostAsJsonAsync("http://localhost:5083/api/Files", file);
        saveResponse.EnsureSuccessStatusCode();
        
        Console.WriteLine("Fichier enregistré en bd");
    }
    
    private class AddResponse
    {
        public string Hash { get; set; }
    }

    public class File
    {
        public string Id { get; set; } = null!;
        public string Name { get; set; }
        public string Hash { get; set; }
        public string Category { get; set; }
        public bool IsPublic { get; set; }
        public string Owner { get; set; }
        public string EncryptionKey { get; set; }
    }
}