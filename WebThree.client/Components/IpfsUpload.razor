@page "/file-upload"
@using Microsoft.Extensions.Configuration
@using MongoDB.Bson
@using System.Diagnostics
@using System.Net.Http
@using System.Net.Http.Json
@using System.ComponentModel
@using System.Net
@using System.Security.Claims
@using MetaMask.Blazor
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json.Bson
@using WebThree.client.Models
@inject AuthenticationStateProvider AuthStateProvider
@inject IMetaMaskService MetaMaskService
@inject HttpClient Http
@inject IConfiguration Configuration
@inject FileStateContainer FileState

<div class="min-h-screen w-full flex items-center justify-center flex-col bg-gray-100 mb-12">
    <div class="text-2xl mb-2">Téléverser un fichier</div>

    <InputFile class="transition ease-in-out duration-600 text-sm hover:text-white border border-gray-700 hover:bg-gray-800 px-4 py-2 rounded mt-4 mb-2 cursor-pointer"
               OnChange="@HandleFileSelected" />

    <div class="mt-4 mb-2">
        <label for="category">Category:</label>
        <InputSelect @bind-Value="category" TValue="string" class="px-4 py-2 border rounded">
            <option value="">. . . . . . . . . .</option>
            <option value="Hortense">Hortense</option>
            <option value="Pierre">Pierre</option>
            <option value="Ariane">Ariane</option>
        </InputSelect>
    </div>

    <div class="mt-4 mb-2">
        <input type="checkbox" id="isPublic" @bind="isPublic" />
        <label for="isPublic">Privé</label>
    </div>

    @if (fileContent != null)
    {
        <button class="transition ease-in-out duration-300 text-sm text-white bg-gray-700 hover:bg-gray-800 px-4 py-2 mt-2 mb-4 rounded"
                @onclick="AddToIPFS">
            Valider
        </button>
    }
</div>

@code {
    private byte[] fileContent;
    private string fileName;
    private string category;
    private bool isPublic;
    private string userAddress;
    private string apiBaseUrl;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userAddress = user.Identity.Name;
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        fileName = file.Name;
        using var ms = new MemoryStream();
        await file.OpenReadStream(1024 * 1024 * 5).CopyToAsync(ms);
        fileContent = ms.ToArray();
    }

    private async Task AddToIPFS()
    {
        Console.WriteLine($"fileContent: {fileContent != null}");
        Console.WriteLine($"fileName: {fileName}");
        Console.WriteLine($"category: {category}");
        Console.WriteLine($"isPublic: {isPublic}");
        Console.WriteLine($"userAddress: {userAddress}");

        if (fileContent == null || string.IsNullOrEmpty(fileName) || string.IsNullOrEmpty(category) || string.IsNullOrEmpty(userAddress))
        {
            Console.WriteLine("One or more required fields are null or empty.");
            return;
        }

        var formData = new MultipartFormDataContent();
        formData.Add(new ByteArrayContent(fileContent), "file", fileName);
        formData.Add(new StringContent(category), "category");
        formData.Add(new StringContent(isPublic.ToString()), "isPublic");
        formData.Add(new StringContent(userAddress), "userAddress");

        var response = await Http.PostAsync($"{apiBaseUrl}/api/Files/Upload", formData);
        response.EnsureSuccessStatusCode();

        var result = await response.Content.ReadFromJsonAsync<UploadResponse>();
        Console.WriteLine($"Fichier ajouté à IPFS avec URL : {result.Url}");
        
        await ReloadData();
    }

    private async Task ReloadData()
    {
        var files = await Http.GetFromJsonAsync<List<File>>($"{apiBaseUrl}/api/Files/user/{userAddress}");
        FileState.SetFiles(files);
    }
    
    private class UploadResponse
    {
        public string Url { get; set; }
    }
}